#!/usr/bin/python
# This file is part of Fido
# Copyright (C) 2015 Simone 'evilsocket' Margaritelli
# evilsocket@gmail.com
# https://evilsocket.net
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import sys
import os
import collections
from fido.core.log import Log
from fido.core.loader import Loader
from fido.version import VERSION

loader = Loader()

TEMPLATES = loader.templates
ACTIONS = collections.OrderedDict((
    ( "help",    "Print the usage menu." ),
    ( "create",  "Create a project with the specified template, requires a template and a path." ),
    ( "add",     "Add one or multiple files to the proper folders by their extensions." ),
    ( "build",   "Build the current project." ),
    ( "clean",   "Clean built files for the current project." ),
    ( "rebuild", "Clean + Build." ),
    ( "reset",   "Available only for certain templates, remote every build generated file." )
))

def get_pad(l):
    pad = 0
    for name in l:
        if len(name) > pad:
            pad = len(name)
    return pad

def usage():
    print "fido %s - (C) 2015 Simone Margaritelli" % VERSION
    print "Released under the GNU GPL v3."
    print "\nUsage: fido <action> [template] (path)"

    a_pad = get_pad(ACTIONS)
    t_pad = get_pad(TEMPLATES)
    pad = str( max( a_pad, t_pad ) )

    print "\nAvailable actions:\n"
    for name, desc in ACTIONS.iteritems():
        print ( "\t%" + pad + "s : %s" ) % ( name, desc )

    print "\nAvailable templates:\n"
    for name, template in TEMPLATES.iteritems():
        print ( "\t%" + pad + "s : %s" ) % ( template.get_name(), template.get_description() )

    print "\nExample:\n"

    print "\t$ fido create make-c sample-project\n"
    Log.i( "\tCreating project 'sample-project' with template 'make-c' ...\n" )

    print "\t$ cd sample-project"
    print "\t$ fido add io.h io.c networking.h networking.c\n"

    Log.i( "\tCreating 'include/io.h' ..." )
    Log.i( "\tCreating 'src/io.c' ..." )
    Log.i( "\tCreating 'include/networking.h' ..." )
    Log.i( "\tCreating 'src/networking.c' ...\n" )

    print "\t$ fido build"
    Log.i( "\tBuilding ...\n" )

    print "\t$ ./sample-project\n"
    print "\tHello World from sample-project !"

    print
    quit()

def get_project_template():
    if not os.path.isfile('.fido'):
        Log.fatal( "Not a fido project." )

    with open( '.fido', 'rt' ) as fd:
        for line in fd:
            if line[0] == "#":
                continue
            template = line.strip()

    if template not in TEMPLATES:
        Log.fatal( "Invalid template specified in .fido file." )

    return template

def main():
    if len(sys.argv) < 2:
        usage()

    action = sys.argv[1]
    if action not in ACTIONS:
        Log.e( "Invalid action specified." )
        usage()

    if action == "help":
        usage()

    elif action == "create":
        if len(sys.argv) < 4:
            Log.e( "No template or name specified." )
            usage()

        template = sys.argv[2]
        if template not in TEMPLATES:
            Log.e( "Invalid template specified." )
            usage()

        name = sys.argv[3]
        if os.path.exists(name):
            Log.fatal( "Path '%s' already exists." % name )

        Log.i( "Creating project '%s' with template '%s' ..." % ( name, template ) )

        TEMPLATES[template].do_create(name)

    elif action == "build":
        Log.i( "Building ..." )

        template = get_project_template()
        TEMPLATES[template].do_build()

    elif action == "rebuild":
        Log.i( "Rebuilding ..." )

        template = get_project_template()
        TEMPLATES[template].do_clean()
        TEMPLATES[template].do_build()

    elif action == "add":
        template = get_project_template()
        TEMPLATES[template].do_add()

    elif action == "clean":
        template = get_project_template()
        TEMPLATES[template].do_clean()

    elif action == "reset":
        template = get_project_template()
        TEMPLATES[template].do_reset()

if __name__ == '__main__':
    main()
